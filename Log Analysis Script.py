# -*- coding: utf-8 -*-
"""Untitled44.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VGoyZZzslnP6F597xH6VvaaLIMH7Ap6v
"""

import re
from collections import defaultdict

def count_requests_by_ip(log_file_path):
    ip_count = defaultdict(int)
    ip_pattern = re.compile(r'(\d{1,3}\.){3}\d{1,3}|\[([0-9a-fA-F:]+)\]')

    try:
        with open(log_file_path, 'r') as file:
            for line in file:
                match = ip_pattern.match(line)
                if match:
                    ip = match.group(0)
                    ip_count[ip] += 1

        sorted_ips = sorted(ip_count.items(), key=lambda x: x[1], reverse=True)
        print("IP Address | Request Count")
        for ip, count in sorted_ips:
            print(f"{ip} | {count}")

    except FileNotFoundError:
        print(f"Error: The file {log_file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
log_file_path = '/content/sample.log.txt'
count_requests_by_ip(log_file_path)

def count_most_accessed_endpoint(log_file_path):
    endpoint_count = defaultdict(int)
    endpoint_pattern = re.compile(r'"(?:GET|POST|PUT|DELETE|HEAD|OPTIONS|PATCH|TRACE)\s(/[\S]*)\sHTTP/')

    try:
        with open(log_file_path, 'r') as file:
            for line in file:
                match = endpoint_pattern.search(line)
                if match:
                    endpoint = match.group(1)
                    endpoint_count[endpoint] += 1

        if endpoint_count:
            sorted_endpoints = sorted(endpoint_count.items(), key=lambda x: x[1], reverse=True)
            print("Most Frequently Accessed Endpoint:")
            print(f"{sorted_endpoints[0][0]} (Accessed {sorted_endpoints[0][1]} times)")
        else:
            print("No endpoints found in the log file.")

    except FileNotFoundError:
        print(f"Error: The file {log_file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
log_file_path = '/content/sample.log.txt'
count_most_accessed_endpoint(log_file_path)

def detect_suspicious_activity(log_file_path, threshold=10):
    failed_login_count = defaultdict(int)
    failed_login_pattern = re.compile(r'(\d+\.\d+\.\d+\.\d+).*"(GET|POST)\s([^\s]+)\sHTTP/[\d\.]+".*(401|403).*')

    try:
        with open(log_file_path, 'r') as file:
            for line in file:
                match = failed_login_pattern.search(line)
                if match:
                    ip = match.group(1)
                    failed_login_count[ip] += 1

        flagged_ips = {ip: count for ip, count in failed_login_count.items() if count > threshold}

        if flagged_ips:
            print("Suspicious Activity Detected:")
            print(f"{'IP Address':<15} {'Failed Login Attempts'}")
            for ip, count in flagged_ips.items():
                print(f"{ip:<15} {count}")
        else:
            print("No suspicious activity detected.")

    except FileNotFoundError:
        print(f"Error: The file {log_file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
log_file_path = '/content/sample.log.txt'
detect_suspicious_activity(log_file_path, threshold=5)

import re
import csv
from collections import defaultdict

def count_requests_by_ip(log_file_path, csv_writer):
    ip_count = defaultdict(int)
    ip_pattern = re.compile(r'(\d{1,3}\.){3}\d{1,3}|\[([0-9a-fA-F:]+)\]')

    try:
        with open(log_file_path, 'r') as file:
            for line in file:
                match = ip_pattern.match(line)
                if match:
                    ip = match.group(0)
                    ip_count[ip] += 1

        # Write IP request count to CSV
        csv_writer.writerow(["Requests per IP"])
        csv_writer.writerow(["IP Address", "Request Count"])
        for ip, count in ip_count.items():
            csv_writer.writerow([ip, count])

    except FileNotFoundError:
        print(f"Error: The file {log_file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

def count_most_accessed_endpoint(log_file_path, csv_writer):
    endpoint_count = defaultdict(int)
    endpoint_pattern = re.compile(r'"(?:GET|POST|PUT|DELETE|HEAD|OPTIONS|PATCH|TRACE)\s(/[\S]*)\sHTTP/')

    try:
        with open(log_file_path, 'r') as file:
            for line in file:
                match = endpoint_pattern.search(line)
                if match:
                    endpoint = match.group(1)
                    endpoint_count[endpoint] += 1

        # Write most accessed endpoint to CSV
        csv_writer.writerow(["Most Accessed Endpoint"])
        csv_writer.writerow(["Endpoint", "Access Count"])
        if endpoint_count:
            sorted_endpoints = sorted(endpoint_count.items(), key=lambda x: x[1], reverse=True)
            for endpoint, count in sorted_endpoints:
                csv_writer.writerow([endpoint, count])
        else:
            csv_writer.writerow(["No endpoints found in the log file."])

    except FileNotFoundError:
        print(f"Error: The file {log_file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

def detect_suspicious_activity(log_file_path, threshold, csv_writer):
    failed_login_count = defaultdict(int)
    failed_login_pattern = re.compile(r'(\d+\.\d+\.\d+\.\d+).*"(GET|POST)\s([^\s]+)\sHTTP/[\d\.]+".*(401|403).*')

    try:
        with open(log_file_path, 'r') as file:
            for line in file:
                match = failed_login_pattern.search(line)
                if match:
                    ip = match.group(1)
                    failed_login_count[ip] += 1

        # Write suspicious activity data to CSV
        csv_writer.writerow(["Suspicious Activity"])
        csv_writer.writerow(["IP Address", "Failed Login Attempts"])
        flagged_ips = {ip: count for ip, count in failed_login_count.items() if count > threshold}
        if flagged_ips:
            for ip, count in flagged_ips.items():
                csv_writer.writerow([ip, count])
        else:
            csv_writer.writerow(["No suspicious activity detected."])

    except FileNotFoundError:
        print(f"Error: The file {log_file_path} was not found.")
    except Exception as e:
        print(f"An error occurred: {e}")

def log_analysis_to_csv(log_file_path, threshold=10):
    try:
        with open('log_analysis_results.csv', 'w', newline='') as csvfile:
            csv_writer = csv.writer(csvfile)

            # Call each function and pass the csv_writer to them
            count_requests_by_ip(log_file_path, csv_writer)
            count_most_accessed_endpoint(log_file_path, csv_writer)
            detect_suspicious_activity(log_file_path, threshold, csv_writer)

            print("Log analysis results have been saved to 'log_analysis_results.csv'.")

    except Exception as e:
        print(f"An error occurred while writing to CSV: {e}")

# Example usage
log_file_path = '/content/sample.log.txt'
log_analysis_to_csv(log_file_path, threshold=5)